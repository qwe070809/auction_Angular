    论文的其余部分安排如下：第2节讨论了以前在软件工程中采用预测方法的相关工作。我们还提出了前人对软件系统中的表示为图和在软件演化。必要的术语在第3节中介绍，以及有关被检查系统的详细信息。第4节介绍了所提出的方法，涵盖了在预测模型的构建中考虑到的所有参数。第5节讨论了被检查系统中关于小世界现象的观察和对所提出的模型进行评估的必要性。第6节提供了该模型的图形摘要。从网络的角度和软件的角度，对10个开放源码项目的第7节提出了评价结果并进行了讨论。限制和威胁的有效性，在8节最后的上市，我们在9节内容。

2、
analysis of an information set (historical data, models and assumptions available at a given time) and thus every forecast is conditional on this information.

two broad categories ：
 explanatory (or causal) 、
 time series models.


3、
节点对应类，包括抽象类和具体类。

在一些版本的面向对象设计的演变过程中，可能会在任何版本中添加新的节点（类）。所有其他类都被视为现有节点。

节点进化的线性拟合。许多因素起作用，不能用简单的基于回归的模型来解释。
如果历史数据可以由不同类型的增长模型（例如对数或指数）更好地捕获，则可以相应地估计节点的数目。


4、
为了提高边缘和节点创建过程的准确性，我们已经考虑了源节点/目的节点年龄的影响，因为我们已经观察到这个属性在检查系统的演化过程中表现出规律性，而其他属性没有显示任何值得注意的主题。

该模型还进一步改进了与被检查网络的软件性质有关的另外两个功能：
（a）复制机制，以反映每个系统的包级结构
（b）由域规则决定的节点行为限制。

4.1 Preferential Attachment and Duplication
很少有类具有较大的入度（为大量依赖的客户提供服务），而相当多的类被有限数量的其他模块访问，从而导致了低程度的访问。其他大型软件系统的幂律存在的相似结论也被其他研究得出。

我们为每个分析系统构造一个保持所有先前节点行为的数据结构。所谓“行为”，是指过去引入的每个“新”节点，它创建的软件包的边，已经为每个包创建的边数，以及在其中添加了节点本身的包。因此，在建模未来的演化时，我们选择先前的行为并复制它。

我们运用这两个模型：我们依靠复制模型确定大概方面的软件包的选择（因此我们引入domain相关知识的演化模型）和更细腻的过程类的选择我们采用择优模型（从而确保幂律现象的保存）

4.2 Modeling Node Activity

4.3 Effect of Class Age

4.4 Edge Removal


7、
图10中提供了图形概述（图10）。
（步骤1）首先，对正在调查的项目版本进行解析并映射到其相应的网络表示。
（步骤2）并对这些网络表示进行分析，以提取前述的过去分布。
接下来，对所有要模拟的版本重复一系列步骤，以便对进化后的网络进行更改。必须执行的所有操作都在所示步骤中描述，以及必须考虑的参数。

最终我们沿着两个轴执行评估：
1：网络视角。我们测试从该模型的应用推断出的网络属性，针对最终可用软件版本的相应属性的值。
2：软件的视角。为了证明这种预测模型的实际开发潜力，我们研究了在evolution of class fan-in 以及 afferent and efferent package coupling 的预测能力。

7.2
基于网络的代表软件预测模型将他们的结果是否可以由软件开发人员或维护人员利用是有价值的。例如，对未来软件演化的预测可以指示哪些系统类可能过载，基于预期的入度。